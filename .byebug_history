c
bundle[0][1]["resource"]["fields"]["price"].to_f.round 2
bundle[0][1]["resource"]["fields"]["price"].to_f
bundle[0][1]["resource"]["fields"]["price"]
bundle[0][1]["resource"]["fields"]
bundle[0][1]["resource"]
bundle[0][1]
bundle[0]
bundle
c
response.to_s
response
c
a
z.to_s
z = RestClient.get a, {accept: "application/json\;charset=UTF-8", user_agent: 'Mozilla/5.0 (Linux\; Android 6.0\; MotoE2(4G-LTE) Build/MPI24.65-39) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.81 Mobile Safari/537.36'}
RestClient.get a, {accept: "application/json\;charset=UTF-8", user_agent: 'Mozilla/5.0 (Linux\; Android 6.0\; MotoE2(4G-LTE) Build/MPI24.65-39) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.81 Mobile Safari/537.36'}
RestClient.get a, {accept: "application/json\;charset=UTF-8", user_agent: 'Mozilla/5.0 (Linux; Android 6.0\; MotoE2(4G-LTE) Build/MPI24.65-39) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.81 Mobile Safari/537.36'}
RestClient.get a, {accept: "application/json;charset=UTF-8", user_agent: 'Mozilla/5.0 (Linux; Android 6.0; MotoE2(4G-LTE) Build/MPI24.65-39) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.81 Mobile Safari/537.36'}
RestClient.get a, {accept: "application/json;charset=UTF-8", :user_agent => 'Mozilla/5.0 (Linux; Android 6.0; MotoE2(4G-LTE) Build/MPI24.65-39) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.81 Mobile Safari/537.36'}
RestClient.get a, {accept: "application/json;charset=UTF-8" :user_agent => 'Mozilla/5.0 (Linux; Android 6.0; MotoE2(4G-LTE) Build/MPI24.65-39) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.81 Mobile Safari/537.36'}
RestClient.get(a) { |res, req, result| puts res, req, result }
RestClient.get(a) do |res, req, result|
a = current_price_url
current_price_url
c
response.headers
response.content_type
response.type
response
c
@ordered_list.zip(current_price_data["list"]["resources"])
current_price_data
current_price_data = JSON.parse current_price_string
current_price_data
JSON.parse current_price_string
current_price_string
current_price_data
n
current_price_string
n
response
n
c
JSON.parse a.body.to_s
a.body.to_s
a.body
a
n
c
a = RestClient.get(current_price_url, :user_agent => 'User-Agent', 'Mozilla/5.0 (Linux; Android 6.0; MotoE2(4G-LTE) Build/MPI24.65-39) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.81 Mobile Safari/537.36')
c
restclient
req.fetch
req.__send__
req.inspect
req.methods
req.get
req
req.use_ssl = true
res2 = Net::HTTP.start(url.host, url.port) {|http| http.request(req) }
url
c
asdf = URI.parse(current_price_url)
res2 = Net::HTTP.start(current_price_url) {|http| http.request(req) }
res2 = Net::HTTP.start(current_price_url.host, current_price_url.port) {|http| http.request(req) }
n
req2.add_field('User-Agent', "Mozilla/5.0 (Linux; Android 6.0; MotoE2(4G-LTE) Build/MPI24.65-39) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.81 Mobile Safari/537.36")
req2.add_field('User-Agent', 'Mozilla/5.0 (Linux; Android 6.0; MotoE2(4G-LTE) Build/MPI24.65-39) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.81 Mobile Safari/537.36'
n
req2 = Net::HTTP::Get.new(current_price_url)
req = HTTP::Get.new(current_price_url)
c
HTTP.get(https://finance.yahoo.com/webservice/v1/symbols/XOM,GE,MSFT,BP,C/quote?bypass=true&format=json)
HTTP.get(https://finance.yahoo.com/webservice/v1/symbols/XOM,GE,MSFT,BP,C/quote?bypass=true&format=json).to_s
HTTP.get(current_price_url).to_s
current_price_string
current_price_url
@ordered_list[0].stock.ticker_symbol
@ordered_list[0].stock
@ordered_list[0]
@ordered_list.map(){|i| i.stock.ticker_symbol}.join(",")
current_price_url
current_price_data
@ordered_list
c
status
n
@data
n
@data["query"]["results"]["quote"]
@data["query"]["results"]
@data["query"]["count"]
@data
n
string
n
url
n
end_date
start_date
ticker
n
s
end_date
end-date
start_date
c
ordered_historical_data[1].reverse
ordered_historical_data[1]
ordered_historical_data[0]
ordered_historical_data
c
@ordered_list[0][1].reverse
@ordered_list[0][1].revese
@ordered_list[0][1]
@ordered_list[0][0]
@ordered_list[0].reverse
@ordered_list[0]
@ordered_list
@ordered_list[0]
@ordered_list
adsf
asdf
adsf = @ordered_list.reverse
@ordered_list.reverse
@ordered_list
c
@ordered_list
@ordered_list.first
qwer[0][1]
qwer = @ordered_list.last
asdf[1]
asdf[0][1]["resource"]["fields"]["price"].to_f.round(2)
asdf[0][1]["resource"]["fields"]["price"]
asdf[0][1]["resource"]["fields"]
asdf[0][1]["resource"]
asdf[0][1]
asdf[0][0].stock.ticker_symbol
asdf[0][0].stock
asdf[0][0].id
asdf[0][0]
asdf[0]
asfd[0]
asdf = @ordered_list[0]
@ordered_list[0]
@ordered_list
n
c
@errors
n
status
n
@ordered_list[0]
@ordered_list
c
@feed.entries
@feed.entries[0..5]
c
date.to_datetime.strftime("%a, %-m/%-d, %l:%M%p")
date.to_datetime.strftime("%a, %-m/%-d, %l:%M:%S%p")
date.to_datetime.strftime("%a, %m/%-d, %l:%M:%S%p")
date.to_datetime.strftime("%a, %m/%-d, %l:%M:%S")
date.to_datetime.strftime("%a, %m/%-d, #l:%M:%S")
date.to_datetime.to_s
date.to_datetime
date.to_s
date
date.class
date
dttm.to_time
dttm.to_s
dttm = DateTime.parse(date.to_s)
dttm = DateTime.strptime(date.to_s)
dttm = Date.parse(date.to_s)
dttm = DateTime.strptime(date)
dttm = Date.parse(date)
date
date = a.published
b
b = a.published
a = @news[0]
@news
c
@news
c
@errors
n
status
n
@ordered_list
n
c
@errors
n
status
n
@ordered_list
@ordered_array
n
month_data
n
month_data_string
n
month_data_url
n
@ordered_list
n
current_price_data
n
current_price_string
n
current_price_url
n
@ordered_list
c
feed.entries.first.published
feed.entries.first.url
feed.entries.first.title
feed.entries.first
JSON.parse feed
JSON.parse feed.entries
feed.entries.length
feed.entries
@news
feed
c
HTTP.get(url)
url
string
c
string
c
status
n
@data
n
c
n
c
n
end_date
start_date
n
params
c
params[:range]
params
c
@ordered_list
x
x = generate_ordered_array current_user.list
current_user.list
List.find_by(user_id: current_user.id)
current_user
@ordered_array
